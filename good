(error "info commands not supported")
la sortie de l'algorithme 3 : []
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> 0]
la sortie de l'algorithme 3 : [{ interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> 0, z -> -1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
 { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
 { interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
resultat de l'algo 4 premiere boucle  [0; 1; 2; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [0; 1; 2; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)]    
 : ma list P_orthogonal c'est : [0]   
mes racines : -1/2
1/2
0 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: (-oo, -1/2);
  u_bound: -1/2;
  l_bound: -oo;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: ;
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (-oo, -1/2);
  u_bound: -1/2;
  l_bound: -oo;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: ;
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> 0, z -> 1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
 { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
 { interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
resultat de l'algo 4 premiere boucle  [0; 1; 2; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [0; 1; 2; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)]    
 : ma list P_orthogonal c'est : [0]   
mes racines : -1/2
1/2
0 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (-oo, -1/2);
  u_bound: -1/2;
  l_bound: -oo;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: ;
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, -1/2);
  u_bound: -1/2;
  l_bound: -oo;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: ;
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
 { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
 { interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2; 256*y^2 + 64]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2; 256*y^2 + 64]    
resultat de l'algo 4 premiere boucle  [-4; 0; 1; 16; 256*y^2; 256*y^2 + 64]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [-4; 0; 1; 16; 256*y^2; 256*y^2 + 64; 16*y^4 - 24*y^2 + 9] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; 256*y^2; 256*y^2 + 64; 16*y^4 - 24*y^2 + 9] 
 ma list Pi c'est :[256*y^2; 256*y^2 + 64; 16*y^4 - 24*y^2 + 9]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <4*x^2 + (-3), (-1, -3/4)>
<4*x^2 + (-3), (3/4, 1)>
0 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 y: [{ interval: {0};
  u_bound: 0;
  l_bound: 0;
  u_set: 256*y^2;
  l_set: 256*y^2;
  p_set: 256*y^2
 256*y^2 + 6416*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: {0};
  u_bound: 0;
  l_bound: 0;
  u_set: 256*y^2;
  l_set: 256*y^2;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> -1]
la sortie de l'algorithme 3 : [{ interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> -1, z -> -1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (0, +oo);
  u_bound: +oo;
  l_bound: 0;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, 0);
  u_bound: 0;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
 { interval: (0, +oo);
  u_bound: +oo;
  l_bound: 0;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
resultat de l'algo 4 premiere boucle  [0; 1; 2; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [0; 1; 2; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <4*x^2 + (-5), (-5/4, -1)>
<4*x^2 + (-5), (1, 5/4)>
-1
1 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> -1, z -> 1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (0, +oo);
  u_bound: +oo;
  l_bound: 0;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, 0);
  u_bound: 0;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
 { interval: (0, +oo);
  u_bound: +oo;
  l_bound: 0;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
resultat de l'algo 4 premiere boucle  [0; 1; 2; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [0; 1; 2; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <4*x^2 + (-5), (-5/4, -1)>
<4*x^2 + (-5), (1, 5/4)>
-1
1 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: {1};
  u_bound: 1;
  l_bound: 1;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: {1};
  u_bound: 1;
  l_bound: 1;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
 { interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
 { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
 { interval: {1};
  u_bound: 1;
  l_bound: 1;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
 { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2; 256*y^2 + 64]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2; 256*y^2 + 64]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
resultat de l'algo 4 premiere boucle  [-4; 0; 1; 16; 256*y^2; 256*y^2 + 64]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [-4; 0; 1; 16; 256*y^2; 256*y^2 + 64; 16*y^4 - 32*y^2 + 16] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; 256*y^2; 256*y^2 + 64; 16*y^4 - 32*y^2 + 16] 
 ma list Pi c'est :[256*y^2; 256*y^2 + 64; 16*y^4 - 32*y^2 + 16]    
 : ma list P_orthogonal c'est : [0]   
mes racines : -1
1
0 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 y: [{ interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: 16*y^4 - 32*y^2 + 16;
  p_set: 256*y^2
 256*y^2 + 6416*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: 16*y^4 - 32*y^2 + 16;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 };
                               { interval: {0};
  u_bound: 0;
  l_bound: 0;
  u_set: 256*y^2;
  l_set: 256*y^2;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> -2]
la sortie de l'algorithme 3 : [{ interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> -2, z -> -1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, +oo);
  u_bound: +oo;
  l_bound: -oo;
  u_set: ;
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, +oo);
  u_bound: +oo;
  l_bound: -oo;
  u_set: ;
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
resultat de l'algo 4 premiere boucle  [1; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [1; -4*z^2 + (4*y^2)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [-4*z^2 + (4*y^2)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2)]    
 : ma list P_orthogonal c'est : []   
mes racines : -2
2 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: (-2, 2);
  u_bound: 2;
  l_bound: -2;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2);
  p_orthogonal_set:  }] 
la sortie de l'algorithme 3 : [{ interval: (-2, 2);
  u_bound: 2;
  l_bound: -2;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2);
  p_orthogonal_set:  };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
 { interval: (-2, 2);
  u_bound: 2;
  l_bound: -2;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2);
  p_orthogonal_set:  };
 { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
resultat de l'algo 4 premiere boucle  [-4; 0; 1; 256*y^2]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [-4; 0; 1; 256*y^2; 16*y^4 - 32*y^2 + 16] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; 256*y^2; 16*y^4 - 32*y^2 + 16] 
 ma list Pi c'est :[256*y^2; 16*y^4 - 32*y^2 + 16]    
 : ma list P_orthogonal c'est : [0]   
mes racines : -1
1
0 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 y: [{ interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: ;
  p_set: 256*y^2
 16*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: ;
  p_set: 256*y^2
                               16*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 };
                               { interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: 16*y^4 - 32*y^2 + 16;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 };
                               { interval: {0};
  u_bound: 0;
  l_bound: 0;
  u_set: 256*y^2;
  l_set: 256*y^2;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> -1/2]
la sortie de l'algorithme 3 : [{ interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> -1/2, z -> -1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (<4*x^2 + (-3), (3/4, 1)>, +oo);
  u_bound: +oo;
  l_bound: <4*x^2 + (-3), (3/4, 1)>;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (<4*x^2 + (-3), (-1, -3/4)>, <4*x^2 + (-3), (3/4, 1)>);
  u_bound: <4*x^2 + (-3), (3/4, 1)>;
  l_bound: <4*x^2 + (-3), (-1, -3/4)>;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, <4*x^2 + (-3), (-1, -3/4)>);
  u_bound: <4*x^2 + (-3), (-1, -3/4)>;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
 { interval: (<4*x^2 + (-3), (-1, -3/4)>, <4*x^2 + (-3), (3/4, 1)>);
  u_bound: <4*x^2 + (-3), (3/4, 1)>;
  l_bound: <4*x^2 + (-3), (-1, -3/4)>;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
 { interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
resultat de l'algo 4 premiere boucle  [0; 1; 2; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [0; 1; 2; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <2*x^2 + (-1), (-3/4, -1/2)>
<2*x^2 + (-1), (1/2, 3/4)>
-1/2
1/2 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: (-oo, <2*x^2 + (-1), (-3/4, -1/2)>);
  u_bound: <2*x^2 + (-1), (-3/4, -1/2)>;
  l_bound: -oo;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: ;
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (-oo, <2*x^2 + (-1), (-3/4, -1/2)>);
  u_bound: <2*x^2 + (-1), (-3/4, -1/2)>;
  l_bound: -oo;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: ;
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> -1/2, z -> 1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (<4*x^2 + (-3), (3/4, 1)>, +oo);
  u_bound: +oo;
  l_bound: <4*x^2 + (-3), (3/4, 1)>;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (<4*x^2 + (-3), (-1, -3/4)>, <4*x^2 + (-3), (3/4, 1)>);
  u_bound: <4*x^2 + (-3), (3/4, 1)>;
  l_bound: <4*x^2 + (-3), (-1, -3/4)>;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, <4*x^2 + (-3), (-1, -3/4)>);
  u_bound: <4*x^2 + (-3), (-1, -3/4)>;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
 { interval: (<4*x^2 + (-3), (-1, -3/4)>, <4*x^2 + (-3), (3/4, 1)>);
  u_bound: <4*x^2 + (-3), (3/4, 1)>;
  l_bound: <4*x^2 + (-3), (-1, -3/4)>;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
 { interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
resultat de l'algo 4 premiere boucle  [0; 1; 2; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [0; 1; 2; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <2*x^2 + (-1), (-3/4, -1/2)>
<2*x^2 + (-1), (1/2, 3/4)>
-1/2
1/2 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: (<2*x^2 + (-1), (1/2, 3/4)>, +oo);
  u_bound: +oo;
  l_bound: <2*x^2 + (-1), (1/2, 3/4)>;
  u_set: ;
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (<2*x^2 + (-1), (1/2, 3/4)>, +oo);
  u_bound: +oo;
  l_bound: <2*x^2 + (-1), (1/2, 3/4)>;
  u_set: ;
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (-oo, <2*x^2 + (-1), (-3/4, -1/2)>);
  u_bound: <2*x^2 + (-1), (-3/4, -1/2)>;
  l_bound: -oo;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: ;
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, <2*x^2 + (-1), (-3/4, -1/2)>);
  u_bound: <2*x^2 + (-1), (-3/4, -1/2)>;
  l_bound: -oo;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: ;
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
 { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
 { interval: (<2*x^2 + (-1), (1/2, 3/4)>, +oo);
  u_bound: +oo;
  l_bound: <2*x^2 + (-1), (1/2, 3/4)>;
  u_set: ;
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2; 256*y^2 + 64]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2; 256*y^2 + 64]    
resultat de l'algo 4 premiere boucle  [-4; 0; 1; 16; 256*y^2; 256*y^2 + 64]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [-4; 0; 1; 16; 256*y^2; 256*y^2 + 64; 16*y^4 - 24*y^2 + 9] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; 256*y^2; 256*y^2 + 64; 16*y^4 - 24*y^2 + 9] 
 ma list Pi c'est :[256*y^2; 256*y^2 + 64; 16*y^4 - 24*y^2 + 9]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <4*x^2 + (-3), (-1, -3/4)>
<4*x^2 + (-3), (3/4, 1)>
0 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 y: [{ interval: (<4*x^2 + (-3), (-1, -3/4)>, 0);
  u_bound: 0;
  l_bound: <4*x^2 + (-3), (-1, -3/4)>;
  u_set: 256*y^2;
  l_set: 16*y^4 - 24*y^2 + 9;
  p_set: 256*y^2
 256*y^2 + 6416*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (<4*x^2 + (-3), (-1, -3/4)>, 0);
  u_bound: 0;
  l_bound: <4*x^2 + (-3), (-1, -3/4)>;
  u_set: 256*y^2;
  l_set: 16*y^4 - 24*y^2 + 9;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: ;
  p_set: 256*y^2
                               16*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 };
                               { interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: 16*y^4 - 32*y^2 + 16;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 };
                               { interval: {0};
  u_bound: 0;
  l_bound: 0;
  u_set: 256*y^2;
  l_set: 256*y^2;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> <16*x^2 + 16*x + 1, (-1, -3/4)>]
la sortie de l'algorithme 3 : [{ interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> <16*x^2 + 16*x + 1, (-1, -3/4)>, z -> -1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (<256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>, +oo);
  u_bound: +oo;
  l_bound: <256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (<256*x^4 + (-288*x^2) + 33, (-1/2, -1/4)>, <256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>);
  u_bound: <256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>;
  l_bound: <256*x^4 + (-288*x^2) + 33, (-1/2, -1/4)>;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, <256*x^4 + (-288*x^2) + 33, (-1/2, -1/4)>);
  u_bound: <256*x^4 + (-288*x^2) + 33, (-1/2, -1/4)>;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
 { interval: (<256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>, +oo);
  u_bound: +oo;
  l_bound: <256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
resultat de l'algo 4 premiere boucle  [0; 1; 2; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [0; 1; 2; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <256*x^4 + (-352*x^2) + 73, (-5/4, -1)>
<256*x^4 + (-352*x^2) + 73, (1, 5/4)>
<256*x^4 + (-224*x^2) + 1, (-1, -3/4)>
<256*x^4 + (-224*x^2) + 1, (3/4, 1)> 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: (<256*x^4 + (-352*x^2) + 73, (-5/4, -1)>, <256*x^4 + (-224*x^2) + 1, (-1, -3/4)>);
  u_bound: <256*x^4 + (-224*x^2) + 1, (-1, -3/4)>;
  l_bound: <256*x^4 + (-352*x^2) + 73, (-5/4, -1)>;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (<256*x^4 + (-352*x^2) + 73, (-5/4, -1)>, <256*x^4 + (-224*x^2) + 1, (-1, -3/4)>);
  u_bound: <256*x^4 + (-224*x^2) + 1, (-1, -3/4)>;
  l_bound: <256*x^4 + (-352*x^2) + 73, (-5/4, -1)>;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> <16*x^2 + 16*x + 1, (-1, -3/4)>, z -> 1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (<256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>, +oo);
  u_bound: +oo;
  l_bound: <256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (<256*x^4 + (-288*x^2) + 33, (-1/2, -1/4)>, <256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>);
  u_bound: <256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>;
  l_bound: <256*x^4 + (-288*x^2) + 33, (-1/2, -1/4)>;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, <256*x^4 + (-288*x^2) + 33, (-1/2, -1/4)>);
  u_bound: <256*x^4 + (-288*x^2) + 33, (-1/2, -1/4)>;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
 { interval: (<256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>, +oo);
  u_bound: +oo;
  l_bound: <256*x^4 + (-288*x^2) + 33, (1/4, 1/2)>;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[1]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4*z^2 + (4*y^2)]    
resultat de l'algo 4 premiere boucle  [0; 1; 2; -4*z^2 + (4*y^2)]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [0; 1; 2; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; -4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)] 
 ma list Pi c'est :[-4*z^2 + (4*y^2); -4*z^2 + (4*y^2 + 1)]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <256*x^4 + (-352*x^2) + 73, (-5/4, -1)>
<256*x^4 + (-352*x^2) + 73, (1, 5/4)>
<256*x^4 + (-224*x^2) + 1, (-1, -3/4)>
<256*x^4 + (-224*x^2) + 1, (3/4, 1)> 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 z: [{ interval: (<256*x^4 + (-224*x^2) + 1, (3/4, 1)>, <256*x^4 + (-352*x^2) + 73, (1, 5/4)>);
  u_bound: <256*x^4 + (-352*x^2) + 73, (1, 5/4)>;
  l_bound: <256*x^4 + (-224*x^2) + 1, (3/4, 1)>;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (<256*x^4 + (-224*x^2) + 1, (3/4, 1)>, <256*x^4 + (-352*x^2) + 73, (1, 5/4)>);
  u_bound: <256*x^4 + (-352*x^2) + 73, (1, 5/4)>;
  l_bound: <256*x^4 + (-224*x^2) + 1, (3/4, 1)>;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (<256*x^4 + (-352*x^2) + 73, (-5/4, -1)>, <256*x^4 + (-224*x^2) + 1, (-1, -3/4)>);
  u_bound: <256*x^4 + (-224*x^2) + 1, (-1, -3/4)>;
  l_bound: <256*x^4 + (-352*x^2) + 73, (-5/4, -1)>;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
                               -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
                               { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
 s = NONE  le bon recouvrement :::[{ interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
 { interval: (<256*x^4 + (-352*x^2) + 73, (-5/4, -1)>, <256*x^4 + (-224*x^2) + 1, (-1, -3/4)>);
  u_bound: <256*x^4 + (-224*x^2) + 1, (-1, -3/4)>;
  l_bound: <256*x^4 + (-352*x^2) + 73, (-5/4, -1)>;
  u_set: -4*z^2 + (4*y^2);
  l_set: -4*z^2 + (4*y^2 + 1);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
 { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
 { interval: (<256*x^4 + (-224*x^2) + 1, (3/4, 1)>, <256*x^4 + (-352*x^2) + 73, (1, 5/4)>);
  u_bound: <256*x^4 + (-352*x^2) + 73, (1, 5/4)>;
  l_bound: <256*x^4 + (-224*x^2) + 1, (3/4, 1)>;
  u_set: -4*z^2 + (4*y^2 + 1);
  l_set: -4*z^2 + (4*y^2);
  p_set: -4*z^2 + (4*y^2)
 -4*z^2 + (4*y^2 + 1);
  p_orthogonal_set: 0 };
 { interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]  
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2; 256*y^2 + 64]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[256*y^2; 256*y^2 + 64]    
 le discriminant DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD :[-4]    
resultat de l'algo 4 premiere boucle  [-4; 0; 1; 16; 256*y^2; 256*y^2 + 64]  
 resultat avant le filtrage :::::::::::::::::::::::::::::::::::::::::::::::::::::: : [-4; 0; 1; 16; 256*y^2; 256*y^2 + 64; 16*y^4 - 32*y^2 + 16; 16*y^4 - 24*y^2 + 9] 
  sortie de l'algo44444444444444444444444444444444444444444444444444444444444444444444444444 [0; 256*y^2; 256*y^2 + 64; 16*y^4 - 32*y^2 + 16; 16*y^4 - 24*y^2 + 9] 
 ma list Pi c'est :[256*y^2; 256*y^2 + 64; 16*y^4 - 32*y^2 + 16; 16*y^4 - 24*y^2 + 9]    
 : ma list P_orthogonal c'est : [0]   
mes racines : <4*x^2 + (-3), (-1, -3/4)>
<4*x^2 + (-3), (3/4, 1)>
-1
1
0 
 la sortie de l'algorothm 555555555555555555555555555555555555555555555555555555555555555555555555 y: [{ interval: (-1, <4*x^2 + (-3), (-7/8, -3/4)>);
  u_bound: <4*x^2 + (-3), (-7/8, -3/4)>;
  l_bound: -1;
  u_set: 16*y^4 - 24*y^2 + 9;
  l_set: 16*y^4 - 32*y^2 + 16;
  p_set: 256*y^2
 256*y^2 + 6416*y^4 - 32*y^2 + 16
 16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 }] 
la sortie de l'algorithme 3 : [{ interval: (-1, <4*x^2 + (-3), (-7/8, -3/4)>);
  u_bound: <4*x^2 + (-3), (-7/8, -3/4)>;
  l_bound: -1;
  u_set: 16*y^4 - 24*y^2 + 9;
  l_set: 16*y^4 - 32*y^2 + 16;
  p_set: 256*y^2
                               256*y^2 + 6416*y^4 - 32*y^2 + 16
                               16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 };
                               { interval: (<4*x^2 + (-3), (-1, -3/4)>, 0);
  u_bound: 0;
  l_bound: <4*x^2 + (-3), (-1, -3/4)>;
  u_set: 256*y^2;
  l_set: 16*y^4 - 24*y^2 + 9;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: ;
  p_set: 256*y^2
                               16*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 };
                               { interval: {-1};
  u_bound: -1;
  l_bound: -1;
  u_set: 16*y^4 - 32*y^2 + 16;
  l_set: 16*y^4 - 32*y^2 + 16;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 32*y^2 + 16;
  p_orthogonal_set: 0 };
                               { interval: {0};
  u_bound: 0;
  l_bound: 0;
  u_set: 256*y^2;
  l_set: 256*y^2;
  p_set: 256*y^2
                               256*y^2 + 64
                               16*y^4 - 24*y^2 + 9;
  p_orthogonal_set: 0 }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> <4*x^2 + (-3), (-1, -3/4)>]
la sortie de l'algorithme 3 : [{ interval: (1, +oo);
  u_bound: +oo;
  l_bound: 1;
  u_set: ;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-1, 1);
  u_bound: 1;
  l_bound: -1;
  u_set: 1*z^2 - 1;
  l_set: 1*z^2 - 1;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, -1);
  u_bound: -1;
  l_bound: -oo;
  u_set: 1*z^2 - 1;
  l_set: ;
  p_set: 1*z^2 - 1;
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> <4*x^2 + (-3), (-1, -3/4)>, z -> -1]
la sortie de l'algorithme 3 : [{ interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 2*x - 1;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (-oo, 1/2);
  u_bound: 1/2;
  l_bound: -oo;
  u_set: 2*x - 1;
  l_set: ;
  p_set: 2*x - 1;
  p_orthogonal_set:  };
                               { interval: (1/2, +oo);
  u_bound: +oo;
  l_bound: 1/2;
  u_set: ;
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-1/2, 1/2);
  u_bound: 1/2;
  l_bound: -1/2;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  };
                               { interval: (-oo, -1/2);
  u_bound: -1/2;
  l_bound: -oo;
  u_set: 1*x^2 + (-1*z^2 + (1*y^2));
  l_set: ;
  p_set: 1*x^2 + (-1*z^2 + (1*y^2));
  p_orthogonal_set:  }]
le sample point :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [y -> <4*x^2 + (-3), (-1, -3/4)>, z -> -1, x -> 1/2]
sat [y -> <4*x^2 + (-3), (-1, -3/4)>, z -> -1, x -> 1/2]Constraints: (2*x - 1 = 0)
(1*z^2 - 1 = 0)
(1*x^2 + (-1*z^2 + (1*y^2)) = 0)
Variables: y, z, x
is_unsat: false

(error "info commands not supported")
